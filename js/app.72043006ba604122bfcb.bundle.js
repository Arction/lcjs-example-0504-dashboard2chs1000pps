(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,s)=>{const a=s(809),{lightningChart:r,AxisScrollStrategies:n,Themes:o}=a,{createProgressiveFunctionGenerator:i}=s(27),l=2*Math.PI*10,S=r().Dashboard({numberOfRows:1,numberOfColumns:2}),c=S.createChartXY({columnIndex:0,rowIndex:0,columnSpan:1,rowSpan:1}),g=S.createChartXY({columnIndex:1,rowIndex:0,columnSpan:1,rowSpan:1});c.setTitle("Vertical regressive"),c.getDefaultAxisY().setInterval(l,0).setScrollStrategy(n.regressive);const h=c.addLineSeries({dataPattern:{pattern:"RegressiveY",regularProgressiveStep:!0}}).setMaxPointCount(1e4).setCursorSolveBasis("nearest-y");g.setTitle("Vertical progressive");const u=g.addAxisY(!0).setInterval(-l,0).setScrollStrategy(n.progressive),d=g.addLineSeries({yAxis:u,dataPattern:{pattern:"ProgressiveY",regularProgressiveStep:!0}}).setMaxPointCount(1e4).setCursorSolveBasis("nearest-y");g.getDefaultAxisY().dispose(),i().setSamplingFunction(Math.sin).setEnd(2*Math.PI).setStep(.015).generate().setStreamBatchSize(20).setStreamInterval(20).setStreamRepeat(!0).toStream().forEach((e=>{h.add({x:e.y,y:-e.x})})),i().setSamplingFunction((e=>Math.sin(.5*e)+Math.sin(e)+Math.cos(1.5*e)+Math.cos(.25*e))).setEnd(100*Math.PI).setStep(.015).generate().setStreamBatchSize(20).setStreamInterval(20).setStreamRepeat(!0).toStream().forEach((e=>{d.add({x:e.y,y:e.x})}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);