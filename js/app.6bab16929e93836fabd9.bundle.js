(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,a)=>{const s=a(475),r=a(27),{lightningChart:n,AxisScrollStrategies:i,Themes:o}=s,{createProgressiveFunctionGenerator:l}=r,S=2*Math.PI*10,c=n().Dashboard({numberOfRows:1,numberOfColumns:2}),g=c.createChartXY({columnIndex:0,rowIndex:0,columnSpan:1,rowSpan:1}),d=c.createChartXY({columnIndex:1,rowIndex:0,columnSpan:1,rowSpan:1});g.setTitle("Vertical regressive"),g.getDefaultAxisY().setInterval({start:S,end:0,stopAxisAfter:!1}).setScrollStrategy(i.regressive);const p=g.addLineSeries({dataPattern:{pattern:"RegressiveY",regularProgressiveStep:!0}}).setDataCleaning({minDataPointCount:1e4}).setCursorSolveBasis("nearest-y");d.setTitle("Vertical progressive");const h=d.addAxisY(!0).setInterval({start:-S,end:0,stopAxisAfter:!1}).setScrollStrategy(i.progressive),u=d.addLineSeries({yAxis:h,dataPattern:{pattern:"ProgressiveY",regularProgressiveStep:!0}}).setDataCleaning({minDataPointCount:1e4}).setCursorSolveBasis("nearest-y");d.getDefaultAxisY().dispose(),l().setSamplingFunction(Math.sin).setEnd(2*Math.PI).setStep(.015).generate().setStreamBatchSize(20).setStreamInterval(20).setStreamRepeat(!0).toStream().forEach((e=>{p.add({x:e.y,y:-e.x})})),l().setSamplingFunction((e=>Math.sin(.5*e)+Math.sin(e)+Math.cos(1.5*e)+Math.cos(.25*e))).setEnd(100*Math.PI).setStep(.015).generate().setStreamBatchSize(20).setStreamInterval(20).setStreamRepeat(!0).toStream().forEach((e=>{u.add({x:e.y,y:e.x})}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);